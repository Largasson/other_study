class FieldTracker:

    def __setattr__(self, attr, value):
        if attr not in self.__dict__:
            self.__dict__[attr] = []
        if len(self.__dict__[attr]) > 0 and self.__dict__[attr][-1] == value:
            return
        self.__dict__[attr].append(value)

    def __getattribute__(self, attr):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º super –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ __dict__
        if attr == "__dict__":  # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é
            return super().__getattribute__(attr)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —á–µ—Ä–µ–∑ super
        __dict__ = super().__getattribute__("__dict__")
        if attr in __dict__ and __dict__[attr]:  # –ï—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç
            return __dict__[attr][-1]  # –í–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        return super().__getattribute__(attr)  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤


    def base(self, attr):
        if len(self.__dict__[attr]) > 1:
            return self.__dict__[attr][0]
        return self.__dict__[attr][-1]

    def has_changed(self, attr):
        if len(self.__dict__[attr]) > 1:
            return True
        return False

    def changed(self):
        original_attrs = {}
        for attr in self.__dict__:
            if self.has_changed(attr):
                original_attrs[attr] = self.base(attr)
        return original_attrs

    def save(self):
        for attr in self.__dict__:
            if self.has_changed(attr):
                temp = self.__dict__[attr][-1]
                self.__dict__[attr] = [temp]


class Point(FieldTracker):
    fields = ('x', 'y', 'z')

    def __init__(self, x, y, z):
        self.x, self.y, self.z = x, y, z
        super().__init__()


p = Point(1, 2, 3)
print(p.changed())
p.x = 4
print(p.changed())
print(p.x)
p.z = 6
print(p.changed())
p.save()
print(p.changed())
p.y = 8
print(p.changed())
print(p.y)
p.save()
print(p.changed())
p.save()
print(p.changed())










#
# def testing_lesson(filename: str):
#     '''
#     –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ –∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#
#     filename - –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å *.zip, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞
#     '''
#     from zipfile import ZipFile
#     zip_name = filename if filename.endswith('zip') else filename+'.zip'
#     with ZipFile(zip_name) as z:
#         length = len(z.namelist()) // 2
#         files = [(code, out) for code, out in zip(z.namelist()[::2], z.namelist()[1::2])]
#         for file_exec, file_out in files:
#             with z.open(name=file_exec) as fi:
#                 with z.open(name=file_out) as fo:
#                     code, out = fi.read().decode(), fo.read().decode()
#                     print(f'–¢–µ—Å—Ç ‚Ññ {file_exec} –∏–∑ {length}')
#                     print(f'\n–ö–æ–¥: \n\n{code}\n')
#                     print('-' * 10)
#                     print('–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:')
#                     try:
#                         if filename.endswith('zip'):
#                             exec(code)
#                         else:
#                             exec(compile(filename + '(code)', 'tests', 'exec'))
#                         print(f"{'-' * 10}\n–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{out}\n{'*' * 10}")
#                     except Exception as e:
#                         print(f'{"üö´" * 10}\n"–¢–µ—Å—Ç ‚Ññ {file_exec} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å `–æ—à–∏–±–∫–æ–π "{type(e).__name__}: {e}\n')
#                         print(f'–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \n{out}\n{"üö´" * 50}"\n')
#
#
#
# testing_lesson('21.zip')