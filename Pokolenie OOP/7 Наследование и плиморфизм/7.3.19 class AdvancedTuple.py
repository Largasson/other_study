from collections.abc import Iterable


class AdvancedTuple(tuple):
    def __add__(self, other):
        if isinstance(other, Iterable):
            if isinstance(other, dict):
                return AdvancedTuple(tuple(self) + tuple(other.keys()))
            return AdvancedTuple(tuple(self) + tuple(other))
        return NotImplemented

    def __radd__(self, other):
        if isinstance(other, Iterable):
            if isinstance(other, dict):
                return AdvancedTuple(tuple(other.keys()) + tuple(self))
            return AdvancedTuple(tuple(other) + tuple(self))
        return NotImplemented

    def __iadd__(self, other):
        if isinstance(other, Iterable):
            if isinstance(other, dict):
                return AdvancedTuple(tuple(self) + tuple(other.keys()))
            return AdvancedTuple(tuple(self) + tuple(other))
        return NotImplemented


advancedtuple = AdvancedTuple([1, 2, 3])

not_supported = [1, 1.0, None]

for item in not_supported:
    try:
        advancedtuple = advancedtuple + item
    except TypeError as e:
        print(e)

#
# def testing_lesson(filename: str):
#     '''
#     –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ –∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#
#     filename - –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å *.zip, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞
#     '''
#     from zipfile import ZipFile
#     zip_name = filename if filename.endswith('zip') else filename+'.zip'
#     with ZipFile(zip_name) as z:
#         length = len(z.namelist()) // 2
#         files = [(code, out) for code, out in zip(z.namelist()[::2], z.namelist()[1::2])]
#         for file_exec, file_out in files:
#             with z.open(name=file_exec) as fi:
#                 with z.open(name=file_out) as fo:
#                     code, out = fi.read().decode(), fo.read().decode()
#                     print(f'–¢–µ—Å—Ç ‚Ññ {file_exec} –∏–∑ {length}')
#                     print(f'\n–ö–æ–¥: \n\n{code}\n')
#                     print('-' * 10)
#                     print('–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:')
#                     try:
#                         if filename.endswith('zip'):
#                             exec(code)
#                         else:
#                             exec(compile(filename + '(code)', 'tests', 'exec'))
#                         print(f"{'-' * 10}\n–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{out}\n{'*' * 10}")
#                     except Exception as e:
#                         print(f'{"üö´" * 10}\n"–¢–µ—Å—Ç ‚Ññ {file_exec} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å `–æ—à–∏–±–∫–æ–π "{type(e).__name__}: {e}\n')
#                         print(f'–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \n{out}\n{"üö´" * 50}"\n')
#
#
#
# testing_lesson('19.zip')
